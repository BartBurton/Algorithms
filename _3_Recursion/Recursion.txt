Рекурсия 
Рекурсия в программировании - это функция, котороя вызывает сама себя
в своем теле. Примером рекурсии может служить матрешка, мы продолжаем открывать ее
пока не дойдем до последней. В данном случае как-будто срабатывает условие, 
которое предотвращает дальнейшее открытие матрешек. Рекурсия может быть и 
бесконечной, если не имеет условия прекращения вызова самой себя. В реальном
мире пример бесконечной рекурсии может проилбстрировать зеркало, напротив
которого расположенно другое зеркало.

В общем случае рекурсию можно реализовать след. образом:
func t()
{
	...
	...
	t()
	...
}


Стек 
Стек - это структура данных на подобии списка или массива, но со своими особенностями.
Элементы стека помещаются в него, словно блины на штангу, это значаит, что при попытке
получения какого-либо элемента для начала придется взять все стоящие перед ним вплоть до последнего
помещенного. Таким образом стек поддерживает только две операции преобразования своих элементов:
вставка и извлечение.

Пример:
Вставить в стек эл. - 1
Вставить в стек эл. - 2
Вставить в стек эл. - 3
Получить эл. стека => (вернется эл. 3)
Получить эл. стека => (вернется эл. 2)
Получить эл. стека => (вернется эл. 1)


Стек вызовов
При вызове функции программы она помещается в стек и хранится там до тех пор пока не 
завершит свое выполнение. Если функция вызывает внутри себя другую функцию, то вызванная
функция тоже помещается в стек, уже над вызвавшей ее функцией и также хранится там до тех
пор пока не закончит работу. По завершении работы вызванной функции она извлекается из стека 
и управление передается верхней функции стека.
Очевидно, что для выполнения рекурсии тоже используется стек. Когда функция вызывает сама себя
в стек помещается очередная функция, как правило с другими данными, после этого функция вновь
вызывает сама себя и в стек помещается еще одна функция, которой передается управление, так 
продолжается до тех пор пока не выполнится некоторое условие, при котором в очередной функции
рекурсивный вызов функции не выполнится. Тогда функция завершит свою работу и извлечется из стека,
тем самым передав управление след функции стоящей в стеке.
Нужно понимать, что функция хранится в стеке со всеми своими данными, пожтому рекурсивный вызов данной
функции инициирует выделение новых данных в вызванной функции, при этом данные предыдущей, так и будут
храниться в стеке до тех пор пока не выполнятся все функции стоящие выше в стеке и соответственно не 
выполнится сама функция.
Это ведет к тому, что при очень большем стеке вызовов или при догой рекурсии стек может переполниться,
что преведет к Exception'у.
